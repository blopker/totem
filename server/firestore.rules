rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isDocOwner(docId) {
      return request.auth != null && (request.auth.uid == resource.id || request.auth.uid == docId);
    }
    function hasAnyRole(roles) {
      return request.auth != null && request.auth.token.roles != null && request.auth.token.roles.hasAny(roles);
    }

    match /topics/{topic} {
      allow read: if request.auth != null;
    }
    match /userAccountState/{uid}/{documents=**} {
      allow read: if request.auth != null && isDocOwner(uid);
      allow write: if false;
    }
    match /users/{uid}/{documents=**} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && isDocOwner(uid);
    }
    match /circles/{circleId} {
      allow read: if request.auth != null;
      allow create: if hasAnyRole(["keeper"]);
      match /{documents=**} {
        allow read: if request.auth != null;
        allow write: if isDocOwner(resource.data.keeper); // Only circle keeper can update
      }
    }
    match /snapCircles/{circleId} {
      allow read: if request.auth != null;
      allow create: if false; // Only created by cloud function
      match /{documents=**} {
        allow read: if request.auth != null;
        // Only circle keeper or admincan update
        allow write: if isDocOwner(resource.data.keeper) || hasAnyRole(["admin"]); 
      }
    }
    match /activeCircles/{circleId}/{documents=**} {
      allow read: if request.auth != null;
      allow write: if request.auth != null;
    }
		match /system/{type}/{documents=**} {
      allow read: if request.auth != null;
    }
  }
}
